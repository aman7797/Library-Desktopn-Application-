/**
 * LeaveManager, a basic leave management program for small organizations
 *
 * This file is part of LeaveManager.
 *
 * LeaveManager is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * LeaveManager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 *
 * See the GNU General Public License for more details. You should have received
 * a copy of the GNU General Public License along with LeaveManager. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package org.itechkenya.leavemanager.gui;

import java.awt.Color;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTable;
import org.itechkenya.leavemanager.api.DateTimeUtil;
import org.itechkenya.leavemanager.api.JpaManager;
import org.itechkenya.leavemanager.api.UiManager;
import org.itechkenya.leavemanager.domain.Contract;
import org.itechkenya.leavemanager.domain.Employee;
import org.itechkenya.leavemanager.domain.LeaveEvent;
import org.itechkenya.leavemanager.domain.LeaveType;
import org.itechkenya.leavemanager.jpa.exceptions.NonexistentEntityException;
import org.joda.time.DateTime;

/**
 *
 * @author gitahi
 */
public class LeaveEventFrame extends LeaveManagerFrame {

    private LeaveType defaultLeaveType;

    /**
     * Creates new form EarnLeaveFrame
     *
     * @param mainForm
     */
    public LeaveEventFrame(MainForm mainForm) {
        super(mainForm);
        initComponents();
        configureComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        eventButtonGroup = new javax.swing.ButtonGroup();
        outerPanel = new javax.swing.JPanel();
        innerPanel = new javax.swing.JPanel();
        contractYearLabel = new javax.swing.JLabel();
        contractYearTextField = new javax.swing.JTextField();
        daysEarnedLabel = new javax.swing.JLabel();
        daysEarnedTextField = new javax.swing.JTextField();
        daysSpentLabel = new javax.swing.JLabel();
        daysSpentTextField = new javax.swing.JTextField();
        balanceLabel = new javax.swing.JLabel();
        balanceTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        employeeLabel = new javax.swing.JLabel();
        employeeComboBox = new javax.swing.JComboBox();
        contractLabel = new javax.swing.JLabel();
        contractComboBox = new javax.swing.JComboBox();
        eventTypePanel = new javax.swing.JPanel();
        spendRadioButton = new javax.swing.JRadioButton();
        earnRadioButton = new javax.swing.JRadioButton();
        leaveTypeLabel = new javax.swing.JLabel();
        leaveTypeComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        startDateLabel = new javax.swing.JLabel();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        daysTextField = new javax.swing.JTextField();
        daysLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        commentsLabel = new javax.swing.JLabel();
        commentsTextField = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Leave Events");

        outerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        innerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary"));

        contractYearLabel.setText("Contract Year");

        contractYearTextField.setEditable(false);

        daysEarnedLabel.setText("Days Earned");

        daysEarnedTextField.setEditable(false);

        daysSpentLabel.setText("Days Spent");

        daysSpentTextField.setEditable(false);

        balanceLabel.setText("Balance");

        balanceTextField.setEditable(false);
        balanceTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        javax.swing.GroupLayout innerPanelLayout = new javax.swing.GroupLayout(innerPanel);
        innerPanel.setLayout(innerPanelLayout);
        innerPanelLayout.setHorizontalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contractYearLabel)
                    .addComponent(daysEarnedLabel)
                    .addComponent(daysSpentLabel)
                    .addComponent(balanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(daysSpentTextField)
                    .addComponent(daysEarnedTextField)
                    .addComponent(contractYearTextField))
                .addContainerGap())
        );
        innerPanelLayout.setVerticalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerPanelLayout.createSequentialGroup()
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contractYearLabel)
                    .addComponent(contractYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daysEarnedLabel)
                    .addComponent(daysEarnedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daysSpentLabel)
                    .addComponent(daysSpentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Event"));

        employeeLabel.setText("Employee");

        employeeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                employeeComboBoxItemStateChanged(evt);
            }
        });

        contractLabel.setText("Contract");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, employeeComboBox, org.jdesktop.beansbinding.ELProperty.create("${selectedItem != null}"), contractComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        contractComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                contractComboBoxItemStateChanged(evt);
            }
        });

        eventTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Event Type"));

        eventButtonGroup.add(spendRadioButton);
        spendRadioButton.setText("Spend");

        eventButtonGroup.add(earnRadioButton);
        earnRadioButton.setText("Earn");

        javax.swing.GroupLayout eventTypePanelLayout = new javax.swing.GroupLayout(eventTypePanel);
        eventTypePanel.setLayout(eventTypePanelLayout);
        eventTypePanelLayout.setHorizontalGroup(
            eventTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spendRadioButton)
                .addGap(18, 18, 18)
                .addComponent(earnRadioButton)
                .addContainerGap(403, Short.MAX_VALUE))
        );
        eventTypePanelLayout.setVerticalGroup(
            eventTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventTypePanelLayout.createSequentialGroup()
                .addGroup(eventTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(earnRadioButton)
                    .addComponent(spendRadioButton))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        leaveTypeLabel.setText("Leave Type");

        leaveTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                leaveTypeComboBoxItemStateChanged(evt);
            }
        });
        leaveTypeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                leaveTypeComboBoxFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(employeeLabel)
                            .addComponent(contractLabel))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contractComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(employeeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(eventTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(leaveTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeLabel)
                    .addComponent(employeeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contractLabel)
                    .addComponent(contractComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leaveTypeLabel)
                    .addComponent(leaveTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dates"));

        startDateLabel.setText("Start Date");

        startDateChooser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                startDateChooserFocusLost(evt);
            }
        });
        startDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDateChooserPropertyChange(evt);
            }
        });

        daysTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daysTextFieldActionPerformed(evt);
            }
        });
        daysTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                daysTextFieldFocusLost(evt);
            }
        });

        daysLabel.setText("Days");

        endDateLabel.setText("End Date");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, spendRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), endDateLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, spendRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), endDateChooser, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        commentsLabel.setText("Comments");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(daysLabel)
                    .addComponent(commentsLabel)
                    .addComponent(startDateLabel)
                    .addComponent(endDateLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(commentsTextField)
                    .addComponent(daysTextField)
                    .addComponent(endDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daysLabel)
                    .addComponent(daysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDateLabel))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commentsLabel)
                    .addComponent(commentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout outerPanelLayout = new javax.swing.GroupLayout(outerPanel);
        outerPanel.setLayout(outerPanelLayout);
        outerPanelLayout.setHorizontalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(outerPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(innerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        outerPanelLayout.setVerticalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(innerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(saveButton)
                    .addComponent(closeButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        clear();
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (!validateFields(false, true)) {
            return;
        }
        save((LeaveEvent) getSelectedItem(), false);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        List<Object> selectedItems = getSelectedItems();
        if (UiManager.showDeleteConfirmationMessage(this, selectedItems.size())) {
            for (Object item : selectedItems) {
                LeaveEvent leaveEvent = (LeaveEvent) item;
                try {
                    if (leaveEvent.getMonth() != null) {
                        UiManager.showWarningMessage(this, "This leave event was automatically created. You cannot delete it.", saveButton);
                        continue;
                    }
                    JpaManager.getLejc().destroy(leaveEvent.getId());
                    updateTable(leaveEvent, UpdateType.DESTROY);
                    mainForm.dataChanged(this);
                    updateLeaveEvents(leaveEvent.getContract());
                } catch (NonexistentEntityException ex) {
                    UiManager.showErrorMessage(this, ex.getMessage());
                    Logger.getLogger(LeaveEventFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void employeeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_employeeComboBoxItemStateChanged
        Employee employee = (Employee) employeeComboBox.getSelectedItem();
        if (employee != null) {
            List<Contract> contractList = JpaManager.getCjc().findContracts(employee);
            Collections.sort(contractList);
            contractComboBox.removeAllItems();
            for (Contract contract : contractList) {
                contractComboBox.addItem(contract);
                if (contract.getActive()) {
                    contractComboBox.setSelectedItem(contract);
                } else {
                    contractComboBox.setSelectedItem(null);
                }
            }
        } else {
            contractComboBox.setSelectedItem(null);
        }
    }//GEN-LAST:event_employeeComboBoxItemStateChanged

    private void contractComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_contractComboBoxItemStateChanged
        Contract contract = (Contract) contractComboBox.getSelectedItem();
        LeaveEventTableModel model = new LeaveEventTableModel();
        if (contract != null) {
            List<LeaveEvent> leaveEventList = JpaManager.getLejc().findLeaveEvents(contract);
            for (LeaveEvent leaveEvent : leaveEventList) {
                model.createRow(leaveEvent);
            }
            updateLeaveEvents(contract);
            clear();
        }
        table.setModel(model);
    }//GEN-LAST:event_contractComboBoxItemStateChanged

    private void leaveTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leaveTypeComboBoxItemStateChanged
        if (spendRadioButton.isSelected()) {
            showEndDate();
        }
    }//GEN-LAST:event_leaveTypeComboBoxItemStateChanged

    private void leaveTypeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_leaveTypeComboBoxFocusLost
        if (spendRadioButton.isSelected()) {
            showEndDate();
        }
    }//GEN-LAST:event_leaveTypeComboBoxFocusLost

    private void startDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDateChooserPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            if (spendRadioButton.isSelected()) {
                showEndDate();
            }
        }
    }//GEN-LAST:event_startDateChooserPropertyChange

    private void startDateChooserFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startDateChooserFocusLost
        if (spendRadioButton.isSelected()) {
            showEndDate();
        }
    }//GEN-LAST:event_startDateChooserFocusLost

    private void daysTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daysTextFieldActionPerformed
        if (spendRadioButton.isSelected()) {
            showEndDate();
        }
    }//GEN-LAST:event_daysTextFieldActionPerformed

    private void daysTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_daysTextFieldFocusLost
        if (spendRadioButton.isSelected()) {
            showEndDate();
        }
    }//GEN-LAST:event_daysTextFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel commentsLabel;
    private javax.swing.JTextField commentsTextField;
    private javax.swing.JComboBox contractComboBox;
    private javax.swing.JLabel contractLabel;
    private javax.swing.JLabel contractYearLabel;
    private javax.swing.JTextField contractYearTextField;
    private javax.swing.JLabel daysEarnedLabel;
    private javax.swing.JTextField daysEarnedTextField;
    private javax.swing.JLabel daysLabel;
    private javax.swing.JLabel daysSpentLabel;
    private javax.swing.JTextField daysSpentTextField;
    private javax.swing.JTextField daysTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JRadioButton earnRadioButton;
    private javax.swing.JComboBox employeeComboBox;
    private javax.swing.JLabel employeeLabel;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.ButtonGroup eventButtonGroup;
    private javax.swing.JPanel eventTypePanel;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox leaveTypeComboBox;
    private javax.swing.JLabel leaveTypeLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JRadioButton spendRadioButton;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTable table;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void save(LeaveEvent leaveEvent, boolean auto) {
        try {
            Contract contract = (Contract) contractComboBox.getSelectedItem();
            if (leaveEvent == null || auto) {
                if (!auto) {
                    leaveEvent = new LeaveEvent();
                    flesh(leaveEvent);
                }
                JpaManager.getLejc().create(leaveEvent);
                if (leaveEvent.getContract().equals(contract)) {
                    updateTable(leaveEvent, UpdateType.CREATE);
                }
            } else {
                if (leaveEvent.getMonth() != null) {
                    UiManager.showWarningMessage(this, "This leave event was automatically created. You cannot update it.", saveButton);
                    return;
                }
                flesh(leaveEvent);
                JpaManager.getLejc().edit(leaveEvent);
                updateTable(leaveEvent, UpdateType.EDIT);
            }
            clear();
            mainForm.dataChanged(this);
            updateLeaveEvents(leaveEvent.getContract());
        } catch (NonexistentEntityException ex) {
            if (!auto) {
                UiManager.showErrorMessage(this, ex.getMessage());
            }
            Logger.getLogger(LeaveEventFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            if (!auto) {
                UiManager.showErrorMessage(this, ex.getMessage());
            }
            Logger.getLogger(LeaveEventFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public final void loadData() {
        List<Employee> employeeList = JpaManager.getEjc().findEmployeeEntities();
        Collections.sort(employeeList);
        employeeComboBox.removeAllItems();
        for (Employee employee : employeeList) {
            employeeComboBox.addItem(employee);
        }
        employeeComboBox.setSelectedItem(null);

        List<LeaveType> leaveTypeList = JpaManager.getLtjc().findLeaveTypeEntities();
        Collections.sort(leaveTypeList);
        leaveTypeComboBox.removeAllItems();
        for (LeaveType leaveType : leaveTypeList) {
            leaveTypeComboBox.addItem(leaveType);
            if (leaveType.getRegular()) {
                leaveTypeComboBox.setSelectedItem(leaveType);
                defaultLeaveType = leaveType;
            } else {
                leaveTypeComboBox.setSelectedItem(null);
            }
        }
        LeaveEventTableModel model = new LeaveEventTableModel();
        table.setModel(model);
        clear();
    }

    @Override
    public void dataChanged(LeaveManagerFrame source) {
        if (source instanceof EmployeeFrame
                || source instanceof ContractFrame
                || source instanceof LeaveTypeFrame) {
            loadData();
        }
    }

    @Override
    public void flesh(Object item) {
        LeaveEvent leaveEvent = (LeaveEvent) item;
        if (leaveEvent != null) {
            leaveEvent.setContract((Contract) contractComboBox.getSelectedItem());
            leaveEvent.setLeaveType((LeaveType) leaveTypeComboBox.getSelectedItem());
            leaveEvent.setStartDate(startDateChooser.getDate());
            leaveEvent.setContractYear(leaveEvent.getContract().calculateContractYear(leaveEvent.getStartDate()));
            if (earnRadioButton.isSelected()) {
                leaveEvent.setDaysEarned(new BigDecimal(daysTextField.getText()));
                leaveEvent.setDaysSpent(null);
                leaveEvent.setEndDate(null);
            } else if (spendRadioButton.isSelected()) {
                leaveEvent.setDaysSpent(new BigDecimal(daysTextField.getText()));
                leaveEvent.setDaysEarned(null);
                leaveEvent.setEndDate(endDateChooser.getDate());
            }
            if (!commentsTextField.getText().equals("")) {
                leaveEvent.setComment(commentsTextField.getText());
            }
        }
    }

    @Override
    public JButton getOkButton() {
        return saveButton;
    }

    @Override
    public JButton getDeleteButton() {
        return deleteButton;
    }

    @Override
    public JTable getTable() {
        return table;
    }

    @Override
    public void clearFields() {
        if (contractComboBox.getSelectedItem() == null) {
            if (table.getModel() != null && table.getModel() instanceof LeaveEventTableModel) {
                LeaveEventTableModel model = (LeaveEventTableModel) table.getModel();
                model.clear();
            }
        }
        spendRadioButton.setSelected(true);
        leaveTypeComboBox.setSelectedItem(defaultLeaveType);
        startDateChooser.setDate(null);
        daysTextField.setText("");
        endDateChooser.setDate(null);
        commentsTextField.setText("");
    }

    @Override
    public void showSelectedItem(Object item) {
        LeaveEvent leaveEvent = (LeaveEvent) item;
        if (leaveEvent != null) {
            employeeComboBox.setSelectedItem(leaveEvent.getContract().getEmployee());
            contractComboBox.setSelectedItem(leaveEvent.getContract());
            startDateChooser.setDate(leaveEvent.getStartDate());
            leaveTypeComboBox.setSelectedItem(leaveEvent.getLeaveType());
            daysTextField.setText(leaveEvent.getDaysEarned() != null
                    ? leaveEvent.getDaysEarned().toString() : leaveEvent.getDaysSpent().toString());
            earnRadioButton.setSelected(leaveEvent.getDaysEarned() != null);
            spendRadioButton.setSelected(leaveEvent.getDaysSpent() != null);
            endDateChooser.setDate(leaveEvent.getEndDate());
            commentsTextField.setText(leaveEvent.getComment());
        }
    }

    private class LeaveEventTableModel extends LeaveManagerTableModel {

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (rowIndex >= getRows().size()) {
                return null;
            }
            LeaveEvent leaveEvent = (LeaveEvent) getRow(rowIndex);
            switch (columnIndex) {
                case 0:
                    return leaveEvent.getContractYear();
                case 1:
                    return leaveEvent.getLeaveType();
                case 2:
                    return leaveEvent.getStartDate();
                case 3:
                    return leaveEvent.getDaysEarned();
                case 4:
                    return leaveEvent.getDaysSpent();
                case 5:
                    return leaveEvent.getBalance();
                case 6:
                    return leaveEvent.getEndDate();
                case 7:
                    return leaveEvent.getComment();
                case 8:
                    return leaveEvent.getStatus();
                default:
                    return null;
            }
        }

        @Override
        public void createRow(Object row) {
            LeaveEvent newLeaveEvent = (LeaveEvent) row;
            if (!getRows().contains(row)) {
                if (!getRows().isEmpty()) {
                    boolean inserted = false;
                    for (Object item : getRows()) {
                        LeaveEvent leaveEvent = (LeaveEvent) item;
                        if (newLeaveEvent.compareTo(leaveEvent) == -1) {
                            int rowIndex = getRows().indexOf(item);
                            getRows().add(rowIndex, row);
                            inserted = true;
                            fireTableRowsInserted(rowIndex, rowIndex);
                            break;
                        }
                    }
                    if (!inserted) {
                        super.createRow(row);
                    }
                } else {
                    super.createRow(row);
                }
            }
        }

        @Override
        public void editRow(Object row) {
            super.destroyRow(row);
            this.createRow(row);
        }

        @Override
        public String[] getColumns() {
            String[] columns = {"Contract Year", "Leave Type", "Start Date", "Days Earned", "Days Spent", "Balance", "End Date", "Comment", "Status"};
            return columns;
        }
    }

    private void updateLeaveEvents(Contract contract) {
        contract.calculateLeaveEventValues();

        BigDecimal daysEarned = contract.calculateDaysEarned();
        BigDecimal daysSpent = contract.calculateDaysSpent();
        int contractYear = contract.calculateContractYear();
        BigDecimal balance = daysEarned.add(daysSpent.negate());
        contractYearTextField.setText(String.valueOf(contractYear));
        daysEarnedTextField.setText(daysEarned.toString());
        daysSpentTextField.setText(daysSpent.toString());
        balanceTextField.setText(balance.toString());

        if (balance.compareTo(BigDecimal.ZERO) == -1) {
            balanceTextField.setForeground(Color.RED);
        } else {
            balanceTextField.setForeground(new Color(0, 100, 0));
        }
    }

    private void showEndDate() {
        if (!validateFields(true, false)) {
            return;
        }
        LeaveEvent leaveEvent = new LeaveEvent();
        flesh(leaveEvent);
        endDateChooser.setDate(leaveEvent.calculateEndDate());
    }

    private boolean validateFields(boolean excludeEndDate, boolean message) {
        if (employeeComboBox.getSelectedItem() == null) {
            if (message) {
                UiManager.showWarningMessage(this, "Select employee.", employeeComboBox);
            }
            return false;
        }
        if (contractComboBox.getSelectedItem() == null) {
            if (message) {
                UiManager.showWarningMessage(this, "Select contract.", contractComboBox);
            }
            return false;
        }
        if (leaveTypeComboBox.getSelectedItem() == null) {
            if (message) {
                UiManager.showWarningMessage(this, "Select leave type.", leaveTypeComboBox);
            }
            return false;
        }
        if (startDateChooser.getDate() == null) {
            if (message) {
                UiManager.showWarningMessage(this, "Enter leave event start date.", startDateChooser);
            }
            return false;
        }
        if (daysTextField.getText().equals("")) {
            if (message) {
                UiManager.showWarningMessage(this, "Enter days to be " + (spendRadioButton.isSelected() ? "spent" : "earned") + ".", daysTextField);
            }
            return false;
        }
        try {
            BigDecimal test = new BigDecimal(daysTextField.getText());
            if (test.compareTo(new BigDecimal("999.99")) == 1) {
                if (message) {
                    UiManager.showWarningMessage(this, "Days to be earned or spent cannot exceed 999.99.", daysTextField);
                }
                return false;
            }
        } catch (NumberFormatException ex) {
            if (message) {
                UiManager.showWarningMessage(this, "Days to be earned per month must be a decimal number with the format ###.##.", daysTextField);
            }
            Logger.getLogger(LeaveTypeFrame.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        if (startDateChooser.getDate().compareTo(((Contract) contractComboBox.getSelectedItem()).getStartDate()) == -1) {
            if (message) {
                UiManager.showWarningMessage(this, "Leave event start date must be within contract period.", startDateChooser);
            }
            return false;
        }
        if (!excludeEndDate) {
            if (spendRadioButton.isSelected()) {
                if (endDateChooser.getDate() != null) {
                    if (startDateChooser.getDate().compareTo(endDateChooser.getDate()) == 1) {
                        if (message) {
                            UiManager.showWarningMessage(this, "Leave event end date must be greated than start date.", endDateChooser);
                        }
                        return false;
                    }
                    Contract contract = (Contract) contractComboBox.getSelectedItem();
                    if (contract.getEndDate() != null) {
                        if (endDateChooser.getDate().compareTo(contract.getEndDate()) == 1) {
                            if (message) {
                                UiManager.showWarningMessage(this, "Leave event end date must be within contract period.", endDateChooser);
                            }
                            return false;
                        }
                    }
                } else {
                    if (message) {
                        UiManager.showWarningMessage(this, "End date must be specified for 'spend' leave events.", endDateChooser);
                    }
                    return false;
                }
            }
        }
        return true;
    }
}
